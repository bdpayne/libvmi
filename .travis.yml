dist:   bionic
language: c
sudo: true
env:
    global:
        - secure: "$COVERITY_SCAN_TOKEN"

matrix:
    include:

#
# Whitespace check
#
    - env:
        - TEST="whitespace"
      script:
        - git remote add upstream https://github.com/$TRAVIS_REPO_SLUG.git
        - git fetch upstream
        - git diff --check upstream/master

#
# Astyle check
#
    - env:
        - TEST="astyle"
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install astyle
      script:
        - export ARTISTIC_STYLE_OPTIONS=".astylerc" && astyle -Q `find . | egrep "\.c$|\.h$"` > astyle.out
        - TEST=$(cat astyle.out | wc -l)
        - |
          if [[ $TEST -ne 0 ]]; then
            git --no-pager diff
            echo "Please fix style issues as shown above"
            exit 1
          fi

#
# gcc compile test
#
    - env:
        - TEST="gcc compile and install"
      compiler: gcc
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev libvirt-dev libxen-dev libfuse-dev
      script:
        - mkdir build && cd build
        - cmake -DCMAKE_INSTALL_PREFIX=../install ..
        - make
        - make install

#
# clang compile test
#
    - env:
        - TEST="clang compile"
      compiler: clang
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev libvirt-dev libxen-dev libfuse-dev
      script:
        - mkdir build && cd build
        - cmake ..
        - make

#
# Coverity
#
    - env:
        - TEST="Coverity"
      compiler: gcc
      addons:
        coverity_scan:
            project:
                name: "$COVERITY_PROJECT"
                description: "Build submitted via Travis CI"
            notification_email: $COVERITY_EMAIL
            build_command_prepend: "mkdir build; cd build; cmake .."
            build_command:   "make"
            branch_pattern: $COVERITY_BRANCH
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev libvirt-dev libxen-dev libfuse-dev
      script:
      - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

#
# SonarCloud
#
    - env:
        - TEST="SonarCloud"
      dist: xenial
      edge: true
      compiler: clang
      addons:
        sonarcloud:
            organization: "libvmi"
            token:
                secure: "$SONAR_SCAN_TOKEN"
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev libvirt-dev libxen-dev libfuse-dev
      script:
        - 'if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then exit 0; fi'
        - mkdir build && cd build
        - cmake ..
        - build-wrapper-linux-x86-64 --out-dir bw-output make -j2
        - sonar-scanner

#
# clang --analyze test
#
    - env:
        - TEST="clang --analyze"
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev libvirt-dev libxen-dev libfuse-dev
      script:
        - mkdir build && cd build
        - cmake ..
        - make static_analysis_test

#
# debug test
#
    - env:
        - TEST="debug options enabled"
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev libvirt-dev libxen-dev libfuse-dev
      script:
        - mkdir build && cd build
        - cmake -DCMAKE_BUILD_TYPE=DEBUG ..
        - make


#
# disable cache
#
    - env:
        - TEST="disable cache"
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev libvirt-dev libxen-dev libfuse-dev
      script:
        - mkdir build && cd build
        - cmake -DENABLE_ADDRESS_CACHE=OFF -DENABLE_PAGE_CACHE=OFF ..
        - make

#
# without xenstore
#
    - env:
        - TEST="without xenstore"
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev libvirt-dev libxen-dev libfuse-dev
      script:
        - mkdir build && cd build
        - cmake -DENABLE_XENSTORE=OFF ..
        - make

#
# disable config file
#
    - env:
        - TEST="disable libvmi.conf"
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev libvirt-dev libxen-dev libfuse-dev
      script:
        - mkdir build && cd build
        - cmake -DENABLE_CONFIGFILE=OFF -DBUILD_EXAMPLES=OFF ..
        - make

#
# disable rekall profiles
#
    - env:
        - TEST="disable rekall profiles"
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev libvirt-dev libxen-dev libfuse-dev
      script:
        - mkdir build && cd build
        - cmake -DREKALL_PROFILES=OFF -DBUILD_EXAMPLES=OFF ..
        - make

#
# disable safety checks
#
    - env:
        - TEST="disable safety checks"
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev libvirt-dev libxen-dev libfuse-dev
      script:
        - mkdir build && cd build
        - cmake -DENABLE_SAFETY_CHECKS=OFF ..
        - make

#
# release build
#
    - env:
        - TEST="release build"
      install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev libvirt-dev libxen-dev libfuse-dev
      script:
        - mkdir build && cd build
        - cmake -DCMAKE_BUILD_TYPE=RELEASE ..
        - make
